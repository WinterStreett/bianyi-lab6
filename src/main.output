Terminals unused in grammar

   T_STRING
   BOOL


State 17 conflicts: 3 shift/reduce
State 40 conflicts: 4 reduce/reduce
State 158 conflicts: 1 shift/reduce
State 170 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: compUnit

    2 compUnit: funcDef
    3         | statement
    4         | compUnit funcDef
    5         | compUnit statement

    6 funcDef: T IDENTIFIER LBRACKET funcParams RBRACKET block
    7        | T IDENTIFIER LBRACKET funcParams RBRACKET SEMICOLON

    8 funcParams: funcParam
    9           | funcParams COMMA funcParam
   10           | %empty

   11 funcParam: T IDENTIFIER
   12          | T IDENTIFIER LSB RSB
   13          | T IDENTIFIER LSB expr RSB
   14          | funcParam LSB expr RSB

   15 statements: statement
   16           | statements statement

   17 statement: SEMICOLON
   18          | declaration SEMICOLON
   19          | constDeclaration SEMICOLON
   20          | LVal LOP_ASSIGN expr SEMICOLON
   21          | LVal ADD_ASSIGN expr SEMICOLON
   22          | LVal SUB_ASSIGN expr SEMICOLON
   23          | expr SEMICOLON
   24          | block
   25          | IF LBRACKET lOrExp RBRACKET statement
   26          | IF LBRACKET lOrExp RBRACKET statement ELSE statement
   27          | WHILE LBRACKET lOrExp RBRACKET statement
   28          | BREAK SEMICOLON
   29          | CONTINUE SEMICOLON
   30          | RETURN forExpr3 SEMICOLON
   31          | FOR LBRACKET forExpr12 SEMICOLON forExpr12 SEMICOLON forExpr3 RBRACKET statement
   32          | IOFunc SEMICOLON

   33 forExpr12: expr
   34          | T IDENTIFIER LOP_ASSIGN expr
   35          | %empty

   36 forExpr3: expr
   37         | %empty

   38 IOFunc: SCANF LBRACKET STRING COMMA scanfParams RBRACKET
   39       | PRINTF LBRACKET STRING COMMA funcRParams RBRACKET

   40 scanfParams: ADDR IDENTIFIER
   41            | scanfParams COMMA ADDR IDENTIFIER

   42 block: LBRACE RBRACE
   43      | LBRACE statements RBRACE

   44 declaration: T varDef
   45            | declaration COMMA varDef

   46 varDef: LVal
   47       | LVal LOP_ASSIGN initVal

   48 constDeclaration: CONST T constDef
   49                 | constDeclaration COMMA constDef

   50 constDef: LVal LOP_ASSIGN initVal

   51 initVal: expr

   52 T: T_INT
   53  | T_CHAR
   54  | T_BOOL
   55  | T_VOID

   56 expr: addExp
   57     | lOrExp
   58     | IDENTIFIER LOP_ASSIGN expr
   59     | IDENTIFIER ADD_ASSIGN expr
   60     | IDENTIFIER SUB_ASSIGN expr

   61 lOrExp: lAndExp
   62       | lOrExp OR lAndExp

   63 lAndExp: eqExp
   64        | lAndExp AND eqExp

   65 eqExp: relExp
   66      | eqExp LOP_EQ relExp
   67      | eqExp LOP_NQ relExp

   68 relExp: addExp
   69       | relExp LT addExp
   70       | relExp BT addExp
   71       | relExp LTEQ addExp
   72       | relExp BTEQ addExp

   73 addExp: mulExp
   74       | addExp ADD mulExp
   75       | addExp SUB mulExp

   76 mulExp: unaryExp
   77       | mulExp MUL unaryExp
   78       | mulExp DIV unaryExp
   79       | mulExp MOD unaryExp

   80 unaryExp: primaryExp
   81         | ADD unaryExp
   82         | SUB unaryExp
   83         | NOT unaryExp
   84         | IDENTIFIER LBRACKET funcRParams RBRACKET

   85 funcRParams: %empty
   86            | expr
   87            | funcRParams COMMA expr

   88 primaryExp: LBRACKET expr RBRACKET
   89           | LVal
   90           | INC IDENTIFIER
   91           | DEC IDENTIFIER
   92           | IDENTIFIER INC
   93           | IDENTIFIER DEC
   94           | INTEGER
   95           | CHAR
   96           | STRING

   97 LVal: IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
error (256)
T_CHAR (258) 53
T_INT (259) 52
T_STRING (260)
T_BOOL (261) 54
T_VOID (262) 55
IF (263) 25 26
ELSE (264) 26
WHILE (265) 27
BREAK (266) 28
CONTINUE (267) 29
RETURN (268) 30
FOR (269) 31
CONST (270) 48
SCANF (271) 38
PRINTF (272) 39
SEMICOLON (273) 7 17 18 19 20 21 22 23 28 29 30 31 32
LBRACKET (274) 6 7 25 26 27 31 38 39 84 88
RBRACKET (275) 6 7 25 26 27 31 38 39 84 88
LBRACE (276) 42 43
RBRACE (277) 42 43
COMMA (278) 9 38 39 41 45 49 87
LSB (279) 12 13 14
RSB (280) 12 13 14
IDENTIFIER (281) 6 7 11 12 13 34 40 41 58 59 60 84 90 91 92 93 97
INTEGER (282) 94
CHAR (283) 95
BOOL (284)
STRING (285) 38 39 96
ADD (286) 74 81
SUB (287) 75 82
MUL (288) 77
DIV (289) 78
MOD (290) 79
LOP_EQ (291) 66
LOP_NQ (292) 67
OR (293) 62
AND (294) 64
LT (295) 69
BT (296) 70
LTEQ (297) 71
BTEQ (298) 72
ADDR (299) 40 41
INC (300) 90 92
DEC (301) 91 93
NOT (302) 83
LOP_ASSIGN (303) 20 34 47 50 58
ADD_ASSIGN (304) 21 59
SUB_ASSIGN (305) 22 60


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1, on right: 0
compUnit (53)
    on left: 2 3 4 5, on right: 1 4 5
funcDef (54)
    on left: 6 7, on right: 2 4
funcParams (55)
    on left: 8 9 10, on right: 6 7 9
funcParam (56)
    on left: 11 12 13 14, on right: 8 9 14
statements (57)
    on left: 15 16, on right: 16 43
statement (58)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32, on right:
    3 5 15 16 25 26 27 31
forExpr12 (59)
    on left: 33 34 35, on right: 31
forExpr3 (60)
    on left: 36 37, on right: 30 31
IOFunc (61)
    on left: 38 39, on right: 32
scanfParams (62)
    on left: 40 41, on right: 38 41
block (63)
    on left: 42 43, on right: 6 24
declaration (64)
    on left: 44 45, on right: 18 45
varDef (65)
    on left: 46 47, on right: 44 45
constDeclaration (66)
    on left: 48 49, on right: 19 49
constDef (67)
    on left: 50, on right: 48 49
initVal (68)
    on left: 51, on right: 47 50
T (69)
    on left: 52 53 54 55, on right: 6 7 11 12 13 34 44 48
expr (70)
    on left: 56 57 58 59 60, on right: 13 14 20 21 22 23 33 34 36 51
    58 59 60 86 87 88
lOrExp (71)
    on left: 61 62, on right: 25 26 27 57 62
lAndExp (72)
    on left: 63 64, on right: 61 62 64
eqExp (73)
    on left: 65 66 67, on right: 63 64 66 67
relExp (74)
    on left: 68 69 70 71 72, on right: 65 66 67 69 70 71 72
addExp (75)
    on left: 73 74 75, on right: 56 68 69 70 71 72 74 75
mulExp (76)
    on left: 76 77 78 79, on right: 73 74 75 77 78 79
unaryExp (77)
    on left: 80 81 82 83 84, on right: 76 77 78 79 81 82 83
funcRParams (78)
    on left: 85 86 87, on right: 39 84 87
primaryExp (79)
    on left: 88 89 90 91 92 93 94 95 96, on right: 80
LVal (80)
    on left: 97, on right: 20 21 22 46 47 50 89


State 0

    0 $accept: . program $end

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    IF          shift, and go to state 5
    WHILE       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    RETURN      shift, and go to state 9
    FOR         shift, and go to state 10
    CONST       shift, and go to state 11
    SCANF       shift, and go to state 12
    PRINTF      shift, and go to state 13
    SEMICOLON   shift, and go to state 14
    LBRACKET    shift, and go to state 15
    LBRACE      shift, and go to state 16
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    program           go to state 26
    compUnit          go to state 27
    funcDef           go to state 28
    statement         go to state 29
    IOFunc            go to state 30
    block             go to state 31
    declaration       go to state 32
    constDeclaration  go to state 33
    T                 go to state 34
    expr              go to state 35
    lOrExp            go to state 36
    lAndExp           go to state 37
    eqExp             go to state 38
    relExp            go to state 39
    addExp            go to state 40
    mulExp            go to state 41
    unaryExp          go to state 42
    primaryExp        go to state 43
    LVal              go to state 44


State 1

   53 T: T_CHAR .

    $default  reduce using rule 53 (T)


State 2

   52 T: T_INT .

    $default  reduce using rule 52 (T)


State 3

   54 T: T_BOOL .

    $default  reduce using rule 54 (T)


State 4

   55 T: T_VOID .

    $default  reduce using rule 55 (T)


State 5

   25 statement: IF . LBRACKET lOrExp RBRACKET statement
   26          | IF . LBRACKET lOrExp RBRACKET statement ELSE statement

    LBRACKET  shift, and go to state 45


State 6

   27 statement: WHILE . LBRACKET lOrExp RBRACKET statement

    LBRACKET  shift, and go to state 46


State 7

   28 statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 47


State 8

   29 statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 48


State 9

   30 statement: RETURN . forExpr3 SEMICOLON

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    $default  reduce using rule 37 (forExpr3)

    forExpr3    go to state 49
    expr        go to state 50
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 10

   31 statement: FOR . LBRACKET forExpr12 SEMICOLON forExpr12 SEMICOLON forExpr3 RBRACKET statement

    LBRACKET  shift, and go to state 52


State 11

   48 constDeclaration: CONST . T constDef

    T_CHAR  shift, and go to state 1
    T_INT   shift, and go to state 2
    T_BOOL  shift, and go to state 3
    T_VOID  shift, and go to state 4

    T  go to state 53


State 12

   38 IOFunc: SCANF . LBRACKET STRING COMMA scanfParams RBRACKET

    LBRACKET  shift, and go to state 54


State 13

   39 IOFunc: PRINTF . LBRACKET STRING COMMA funcRParams RBRACKET

    LBRACKET  shift, and go to state 55


State 14

   17 statement: SEMICOLON .

    $default  reduce using rule 17 (statement)


State 15

   88 primaryExp: LBRACKET . expr RBRACKET

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    expr        go to state 56
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 16

   42 block: LBRACE . RBRACE
   43      | LBRACE . statements RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    IF          shift, and go to state 5
    WHILE       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    RETURN      shift, and go to state 9
    FOR         shift, and go to state 10
    CONST       shift, and go to state 11
    SCANF       shift, and go to state 12
    PRINTF      shift, and go to state 13
    SEMICOLON   shift, and go to state 14
    LBRACKET    shift, and go to state 15
    LBRACE      shift, and go to state 16
    RBRACE      shift, and go to state 57
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    statements        go to state 58
    statement         go to state 59
    IOFunc            go to state 30
    block             go to state 31
    declaration       go to state 32
    constDeclaration  go to state 33
    T                 go to state 60
    expr              go to state 35
    lOrExp            go to state 36
    lAndExp           go to state 37
    eqExp             go to state 38
    relExp            go to state 39
    addExp            go to state 40
    mulExp            go to state 41
    unaryExp          go to state 42
    primaryExp        go to state 43
    LVal              go to state 44


State 17

   58 expr: IDENTIFIER . LOP_ASSIGN expr
   59     | IDENTIFIER . ADD_ASSIGN expr
   60     | IDENTIFIER . SUB_ASSIGN expr
   84 unaryExp: IDENTIFIER . LBRACKET funcRParams RBRACKET
   92 primaryExp: IDENTIFIER . INC
   93           | IDENTIFIER . DEC
   97 LVal: IDENTIFIER .

    LBRACKET    shift, and go to state 61
    INC         shift, and go to state 62
    DEC         shift, and go to state 63
    LOP_ASSIGN  shift, and go to state 64
    ADD_ASSIGN  shift, and go to state 65
    SUB_ASSIGN  shift, and go to state 66

    LOP_ASSIGN  [reduce using rule 97 (LVal)]
    ADD_ASSIGN  [reduce using rule 97 (LVal)]
    SUB_ASSIGN  [reduce using rule 97 (LVal)]
    $default    reduce using rule 97 (LVal)


State 18

   94 primaryExp: INTEGER .

    $default  reduce using rule 94 (primaryExp)


State 19

   95 primaryExp: CHAR .

    $default  reduce using rule 95 (primaryExp)


State 20

   96 primaryExp: STRING .

    $default  reduce using rule 96 (primaryExp)


State 21

   81 unaryExp: ADD . unaryExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    unaryExp    go to state 68
    primaryExp  go to state 43
    LVal        go to state 51


State 22

   82 unaryExp: SUB . unaryExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    unaryExp    go to state 69
    primaryExp  go to state 43
    LVal        go to state 51


State 23

   90 primaryExp: INC . IDENTIFIER

    IDENTIFIER  shift, and go to state 70


State 24

   91 primaryExp: DEC . IDENTIFIER

    IDENTIFIER  shift, and go to state 71


State 25

   83 unaryExp: NOT . unaryExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    unaryExp    go to state 72
    primaryExp  go to state 43
    LVal        go to state 51


State 26

    0 $accept: program . $end

    $end  shift, and go to state 73


State 27

    1 program: compUnit .
    4 compUnit: compUnit . funcDef
    5         | compUnit . statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    IF          shift, and go to state 5
    WHILE       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    RETURN      shift, and go to state 9
    FOR         shift, and go to state 10
    CONST       shift, and go to state 11
    SCANF       shift, and go to state 12
    PRINTF      shift, and go to state 13
    SEMICOLON   shift, and go to state 14
    LBRACKET    shift, and go to state 15
    LBRACE      shift, and go to state 16
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    $default  reduce using rule 1 (program)

    funcDef           go to state 74
    statement         go to state 75
    IOFunc            go to state 30
    block             go to state 31
    declaration       go to state 32
    constDeclaration  go to state 33
    T                 go to state 34
    expr              go to state 35
    lOrExp            go to state 36
    lAndExp           go to state 37
    eqExp             go to state 38
    relExp            go to state 39
    addExp            go to state 40
    mulExp            go to state 41
    unaryExp          go to state 42
    primaryExp        go to state 43
    LVal              go to state 44


State 28

    2 compUnit: funcDef .

    $default  reduce using rule 2 (compUnit)


State 29

    3 compUnit: statement .

    $default  reduce using rule 3 (compUnit)


State 30

   32 statement: IOFunc . SEMICOLON

    SEMICOLON  shift, and go to state 76


State 31

   24 statement: block .

    $default  reduce using rule 24 (statement)


State 32

   18 statement: declaration . SEMICOLON
   45 declaration: declaration . COMMA varDef

    SEMICOLON  shift, and go to state 77
    COMMA      shift, and go to state 78


State 33

   19 statement: constDeclaration . SEMICOLON
   49 constDeclaration: constDeclaration . COMMA constDef

    SEMICOLON  shift, and go to state 79
    COMMA      shift, and go to state 80


State 34

    6 funcDef: T . IDENTIFIER LBRACKET funcParams RBRACKET block
    7        | T . IDENTIFIER LBRACKET funcParams RBRACKET SEMICOLON
   44 declaration: T . varDef

    IDENTIFIER  shift, and go to state 81

    varDef  go to state 82
    LVal    go to state 83


State 35

   23 statement: expr . SEMICOLON

    SEMICOLON  shift, and go to state 84


State 36

   57 expr: lOrExp .
   62 lOrExp: lOrExp . OR lAndExp

    OR  shift, and go to state 85

    $default  reduce using rule 57 (expr)


State 37

   61 lOrExp: lAndExp .
   64 lAndExp: lAndExp . AND eqExp

    AND  shift, and go to state 86

    $default  reduce using rule 61 (lOrExp)


State 38

   63 lAndExp: eqExp .
   66 eqExp: eqExp . LOP_EQ relExp
   67      | eqExp . LOP_NQ relExp

    LOP_EQ  shift, and go to state 87
    LOP_NQ  shift, and go to state 88

    $default  reduce using rule 63 (lAndExp)


State 39

   65 eqExp: relExp .
   69 relExp: relExp . LT addExp
   70       | relExp . BT addExp
   71       | relExp . LTEQ addExp
   72       | relExp . BTEQ addExp

    LT    shift, and go to state 89
    BT    shift, and go to state 90
    LTEQ  shift, and go to state 91
    BTEQ  shift, and go to state 92

    $default  reduce using rule 65 (eqExp)


State 40

   56 expr: addExp .
   68 relExp: addExp .
   74 addExp: addExp . ADD mulExp
   75       | addExp . SUB mulExp

    ADD  shift, and go to state 93
    SUB  shift, and go to state 94

    SEMICOLON  reduce using rule 56 (expr)
    SEMICOLON  [reduce using rule 68 (relExp)]
    RBRACKET   reduce using rule 56 (expr)
    RBRACKET   [reduce using rule 68 (relExp)]
    COMMA      reduce using rule 56 (expr)
    COMMA      [reduce using rule 68 (relExp)]
    RSB        reduce using rule 56 (expr)
    RSB        [reduce using rule 68 (relExp)]
    $default   reduce using rule 68 (relExp)


State 41

   73 addExp: mulExp .
   77 mulExp: mulExp . MUL unaryExp
   78       | mulExp . DIV unaryExp
   79       | mulExp . MOD unaryExp

    MUL  shift, and go to state 95
    DIV  shift, and go to state 96
    MOD  shift, and go to state 97

    $default  reduce using rule 73 (addExp)


State 42

   76 mulExp: unaryExp .

    $default  reduce using rule 76 (mulExp)


State 43

   80 unaryExp: primaryExp .

    $default  reduce using rule 80 (unaryExp)


State 44

   20 statement: LVal . LOP_ASSIGN expr SEMICOLON
   21          | LVal . ADD_ASSIGN expr SEMICOLON
   22          | LVal . SUB_ASSIGN expr SEMICOLON
   89 primaryExp: LVal .

    LOP_ASSIGN  shift, and go to state 98
    ADD_ASSIGN  shift, and go to state 99
    SUB_ASSIGN  shift, and go to state 100

    $default  reduce using rule 89 (primaryExp)


State 45

   25 statement: IF LBRACKET . lOrExp RBRACKET statement
   26          | IF LBRACKET . lOrExp RBRACKET statement ELSE statement

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    lOrExp      go to state 101
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 102
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 46

   27 statement: WHILE LBRACKET . lOrExp RBRACKET statement

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    lOrExp      go to state 103
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 102
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 47

   28 statement: BREAK SEMICOLON .

    $default  reduce using rule 28 (statement)


State 48

   29 statement: CONTINUE SEMICOLON .

    $default  reduce using rule 29 (statement)


State 49

   30 statement: RETURN forExpr3 . SEMICOLON

    SEMICOLON  shift, and go to state 104


State 50

   36 forExpr3: expr .

    $default  reduce using rule 36 (forExpr3)


State 51

   89 primaryExp: LVal .

    $default  reduce using rule 89 (primaryExp)


State 52

   31 statement: FOR LBRACKET . forExpr12 SEMICOLON forExpr12 SEMICOLON forExpr3 RBRACKET statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    $default  reduce using rule 35 (forExpr12)

    forExpr12   go to state 105
    T           go to state 106
    expr        go to state 107
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 53

   48 constDeclaration: CONST T . constDef

    IDENTIFIER  shift, and go to state 108

    constDef  go to state 109
    LVal      go to state 110


State 54

   38 IOFunc: SCANF LBRACKET . STRING COMMA scanfParams RBRACKET

    STRING  shift, and go to state 111


State 55

   39 IOFunc: PRINTF LBRACKET . STRING COMMA funcRParams RBRACKET

    STRING  shift, and go to state 112


State 56

   88 primaryExp: LBRACKET expr . RBRACKET

    RBRACKET  shift, and go to state 113


State 57

   42 block: LBRACE RBRACE .

    $default  reduce using rule 42 (block)


State 58

   16 statements: statements . statement
   43 block: LBRACE statements . RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    IF          shift, and go to state 5
    WHILE       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    RETURN      shift, and go to state 9
    FOR         shift, and go to state 10
    CONST       shift, and go to state 11
    SCANF       shift, and go to state 12
    PRINTF      shift, and go to state 13
    SEMICOLON   shift, and go to state 14
    LBRACKET    shift, and go to state 15
    LBRACE      shift, and go to state 16
    RBRACE      shift, and go to state 114
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    statement         go to state 115
    IOFunc            go to state 30
    block             go to state 31
    declaration       go to state 32
    constDeclaration  go to state 33
    T                 go to state 60
    expr              go to state 35
    lOrExp            go to state 36
    lAndExp           go to state 37
    eqExp             go to state 38
    relExp            go to state 39
    addExp            go to state 40
    mulExp            go to state 41
    unaryExp          go to state 42
    primaryExp        go to state 43
    LVal              go to state 44


State 59

   15 statements: statement .

    $default  reduce using rule 15 (statements)


State 60

   44 declaration: T . varDef

    IDENTIFIER  shift, and go to state 108

    varDef  go to state 82
    LVal    go to state 83


State 61

   84 unaryExp: IDENTIFIER LBRACKET . funcRParams RBRACKET

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    $default  reduce using rule 85 (funcRParams)

    expr         go to state 116
    lOrExp       go to state 36
    lAndExp      go to state 37
    eqExp        go to state 38
    relExp       go to state 39
    addExp       go to state 40
    mulExp       go to state 41
    unaryExp     go to state 42
    funcRParams  go to state 117
    primaryExp   go to state 43
    LVal         go to state 51


State 62

   92 primaryExp: IDENTIFIER INC .

    $default  reduce using rule 92 (primaryExp)


State 63

   93 primaryExp: IDENTIFIER DEC .

    $default  reduce using rule 93 (primaryExp)


State 64

   58 expr: IDENTIFIER LOP_ASSIGN . expr

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    expr        go to state 118
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 65

   59 expr: IDENTIFIER ADD_ASSIGN . expr

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    expr        go to state 119
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 66

   60 expr: IDENTIFIER SUB_ASSIGN . expr

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    expr        go to state 120
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 67

   84 unaryExp: IDENTIFIER . LBRACKET funcRParams RBRACKET
   92 primaryExp: IDENTIFIER . INC
   93           | IDENTIFIER . DEC
   97 LVal: IDENTIFIER .

    LBRACKET  shift, and go to state 61
    INC       shift, and go to state 62
    DEC       shift, and go to state 63

    $default  reduce using rule 97 (LVal)


State 68

   81 unaryExp: ADD unaryExp .

    $default  reduce using rule 81 (unaryExp)


State 69

   82 unaryExp: SUB unaryExp .

    $default  reduce using rule 82 (unaryExp)


State 70

   90 primaryExp: INC IDENTIFIER .

    $default  reduce using rule 90 (primaryExp)


State 71

   91 primaryExp: DEC IDENTIFIER .

    $default  reduce using rule 91 (primaryExp)


State 72

   83 unaryExp: NOT unaryExp .

    $default  reduce using rule 83 (unaryExp)


State 73

    0 $accept: program $end .

    $default  accept


State 74

    4 compUnit: compUnit funcDef .

    $default  reduce using rule 4 (compUnit)


State 75

    5 compUnit: compUnit statement .

    $default  reduce using rule 5 (compUnit)


State 76

   32 statement: IOFunc SEMICOLON .

    $default  reduce using rule 32 (statement)


State 77

   18 statement: declaration SEMICOLON .

    $default  reduce using rule 18 (statement)


State 78

   45 declaration: declaration COMMA . varDef

    IDENTIFIER  shift, and go to state 108

    varDef  go to state 121
    LVal    go to state 83


State 79

   19 statement: constDeclaration SEMICOLON .

    $default  reduce using rule 19 (statement)


State 80

   49 constDeclaration: constDeclaration COMMA . constDef

    IDENTIFIER  shift, and go to state 108

    constDef  go to state 122
    LVal      go to state 110


State 81

    6 funcDef: T IDENTIFIER . LBRACKET funcParams RBRACKET block
    7        | T IDENTIFIER . LBRACKET funcParams RBRACKET SEMICOLON
   97 LVal: IDENTIFIER .

    LBRACKET  shift, and go to state 123

    $default  reduce using rule 97 (LVal)


State 82

   44 declaration: T varDef .

    $default  reduce using rule 44 (declaration)


State 83

   46 varDef: LVal .
   47       | LVal . LOP_ASSIGN initVal

    LOP_ASSIGN  shift, and go to state 124

    $default  reduce using rule 46 (varDef)


State 84

   23 statement: expr SEMICOLON .

    $default  reduce using rule 23 (statement)


State 85

   62 lOrExp: lOrExp OR . lAndExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    lAndExp     go to state 125
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 102
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 86

   64 lAndExp: lAndExp AND . eqExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    eqExp       go to state 126
    relExp      go to state 39
    addExp      go to state 102
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 87

   66 eqExp: eqExp LOP_EQ . relExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    relExp      go to state 127
    addExp      go to state 102
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 88

   67 eqExp: eqExp LOP_NQ . relExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    relExp      go to state 128
    addExp      go to state 102
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 89

   69 relExp: relExp LT . addExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    addExp      go to state 129
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 90

   70 relExp: relExp BT . addExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    addExp      go to state 130
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 91

   71 relExp: relExp LTEQ . addExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    addExp      go to state 131
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 92

   72 relExp: relExp BTEQ . addExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    addExp      go to state 132
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 93

   74 addExp: addExp ADD . mulExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    mulExp      go to state 133
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 94

   75 addExp: addExp SUB . mulExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    mulExp      go to state 134
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 95

   77 mulExp: mulExp MUL . unaryExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    unaryExp    go to state 135
    primaryExp  go to state 43
    LVal        go to state 51


State 96

   78 mulExp: mulExp DIV . unaryExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    unaryExp    go to state 136
    primaryExp  go to state 43
    LVal        go to state 51


State 97

   79 mulExp: mulExp MOD . unaryExp

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 67
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    unaryExp    go to state 137
    primaryExp  go to state 43
    LVal        go to state 51


State 98

   20 statement: LVal LOP_ASSIGN . expr SEMICOLON

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    expr        go to state 138
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 99

   21 statement: LVal ADD_ASSIGN . expr SEMICOLON

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    expr        go to state 139
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 100

   22 statement: LVal SUB_ASSIGN . expr SEMICOLON

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    expr        go to state 140
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 101

   25 statement: IF LBRACKET lOrExp . RBRACKET statement
   26          | IF LBRACKET lOrExp . RBRACKET statement ELSE statement
   62 lOrExp: lOrExp . OR lAndExp

    RBRACKET  shift, and go to state 141
    OR        shift, and go to state 85


State 102

   68 relExp: addExp .
   74 addExp: addExp . ADD mulExp
   75       | addExp . SUB mulExp

    ADD  shift, and go to state 93
    SUB  shift, and go to state 94

    $default  reduce using rule 68 (relExp)


State 103

   27 statement: WHILE LBRACKET lOrExp . RBRACKET statement
   62 lOrExp: lOrExp . OR lAndExp

    RBRACKET  shift, and go to state 142
    OR        shift, and go to state 85


State 104

   30 statement: RETURN forExpr3 SEMICOLON .

    $default  reduce using rule 30 (statement)


State 105

   31 statement: FOR LBRACKET forExpr12 . SEMICOLON forExpr12 SEMICOLON forExpr3 RBRACKET statement

    SEMICOLON  shift, and go to state 143


State 106

   34 forExpr12: T . IDENTIFIER LOP_ASSIGN expr

    IDENTIFIER  shift, and go to state 144


State 107

   33 forExpr12: expr .

    $default  reduce using rule 33 (forExpr12)


State 108

   97 LVal: IDENTIFIER .

    $default  reduce using rule 97 (LVal)


State 109

   48 constDeclaration: CONST T constDef .

    $default  reduce using rule 48 (constDeclaration)


State 110

   50 constDef: LVal . LOP_ASSIGN initVal

    LOP_ASSIGN  shift, and go to state 145


State 111

   38 IOFunc: SCANF LBRACKET STRING . COMMA scanfParams RBRACKET

    COMMA  shift, and go to state 146


State 112

   39 IOFunc: PRINTF LBRACKET STRING . COMMA funcRParams RBRACKET

    COMMA  shift, and go to state 147


State 113

   88 primaryExp: LBRACKET expr RBRACKET .

    $default  reduce using rule 88 (primaryExp)


State 114

   43 block: LBRACE statements RBRACE .

    $default  reduce using rule 43 (block)


State 115

   16 statements: statements statement .

    $default  reduce using rule 16 (statements)


State 116

   86 funcRParams: expr .

    $default  reduce using rule 86 (funcRParams)


State 117

   84 unaryExp: IDENTIFIER LBRACKET funcRParams . RBRACKET
   87 funcRParams: funcRParams . COMMA expr

    RBRACKET  shift, and go to state 148
    COMMA     shift, and go to state 149


State 118

   58 expr: IDENTIFIER LOP_ASSIGN expr .

    $default  reduce using rule 58 (expr)


State 119

   59 expr: IDENTIFIER ADD_ASSIGN expr .

    $default  reduce using rule 59 (expr)


State 120

   60 expr: IDENTIFIER SUB_ASSIGN expr .

    $default  reduce using rule 60 (expr)


State 121

   45 declaration: declaration COMMA varDef .

    $default  reduce using rule 45 (declaration)


State 122

   49 constDeclaration: constDeclaration COMMA constDef .

    $default  reduce using rule 49 (constDeclaration)


State 123

    6 funcDef: T IDENTIFIER LBRACKET . funcParams RBRACKET block
    7        | T IDENTIFIER LBRACKET . funcParams RBRACKET SEMICOLON

    T_CHAR  shift, and go to state 1
    T_INT   shift, and go to state 2
    T_BOOL  shift, and go to state 3
    T_VOID  shift, and go to state 4

    $default  reduce using rule 10 (funcParams)

    funcParams  go to state 150
    funcParam   go to state 151
    T           go to state 152


State 124

   47 varDef: LVal LOP_ASSIGN . initVal

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    initVal     go to state 153
    expr        go to state 154
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 125

   62 lOrExp: lOrExp OR lAndExp .
   64 lAndExp: lAndExp . AND eqExp

    AND  shift, and go to state 86

    $default  reduce using rule 62 (lOrExp)


State 126

   64 lAndExp: lAndExp AND eqExp .
   66 eqExp: eqExp . LOP_EQ relExp
   67      | eqExp . LOP_NQ relExp

    LOP_EQ  shift, and go to state 87
    LOP_NQ  shift, and go to state 88

    $default  reduce using rule 64 (lAndExp)


State 127

   66 eqExp: eqExp LOP_EQ relExp .
   69 relExp: relExp . LT addExp
   70       | relExp . BT addExp
   71       | relExp . LTEQ addExp
   72       | relExp . BTEQ addExp

    LT    shift, and go to state 89
    BT    shift, and go to state 90
    LTEQ  shift, and go to state 91
    BTEQ  shift, and go to state 92

    $default  reduce using rule 66 (eqExp)


State 128

   67 eqExp: eqExp LOP_NQ relExp .
   69 relExp: relExp . LT addExp
   70       | relExp . BT addExp
   71       | relExp . LTEQ addExp
   72       | relExp . BTEQ addExp

    LT    shift, and go to state 89
    BT    shift, and go to state 90
    LTEQ  shift, and go to state 91
    BTEQ  shift, and go to state 92

    $default  reduce using rule 67 (eqExp)


State 129

   69 relExp: relExp LT addExp .
   74 addExp: addExp . ADD mulExp
   75       | addExp . SUB mulExp

    ADD  shift, and go to state 93
    SUB  shift, and go to state 94

    $default  reduce using rule 69 (relExp)


State 130

   70 relExp: relExp BT addExp .
   74 addExp: addExp . ADD mulExp
   75       | addExp . SUB mulExp

    ADD  shift, and go to state 93
    SUB  shift, and go to state 94

    $default  reduce using rule 70 (relExp)


State 131

   71 relExp: relExp LTEQ addExp .
   74 addExp: addExp . ADD mulExp
   75       | addExp . SUB mulExp

    ADD  shift, and go to state 93
    SUB  shift, and go to state 94

    $default  reduce using rule 71 (relExp)


State 132

   72 relExp: relExp BTEQ addExp .
   74 addExp: addExp . ADD mulExp
   75       | addExp . SUB mulExp

    ADD  shift, and go to state 93
    SUB  shift, and go to state 94

    $default  reduce using rule 72 (relExp)


State 133

   74 addExp: addExp ADD mulExp .
   77 mulExp: mulExp . MUL unaryExp
   78       | mulExp . DIV unaryExp
   79       | mulExp . MOD unaryExp

    MUL  shift, and go to state 95
    DIV  shift, and go to state 96
    MOD  shift, and go to state 97

    $default  reduce using rule 74 (addExp)


State 134

   75 addExp: addExp SUB mulExp .
   77 mulExp: mulExp . MUL unaryExp
   78       | mulExp . DIV unaryExp
   79       | mulExp . MOD unaryExp

    MUL  shift, and go to state 95
    DIV  shift, and go to state 96
    MOD  shift, and go to state 97

    $default  reduce using rule 75 (addExp)


State 135

   77 mulExp: mulExp MUL unaryExp .

    $default  reduce using rule 77 (mulExp)


State 136

   78 mulExp: mulExp DIV unaryExp .

    $default  reduce using rule 78 (mulExp)


State 137

   79 mulExp: mulExp MOD unaryExp .

    $default  reduce using rule 79 (mulExp)


State 138

   20 statement: LVal LOP_ASSIGN expr . SEMICOLON

    SEMICOLON  shift, and go to state 155


State 139

   21 statement: LVal ADD_ASSIGN expr . SEMICOLON

    SEMICOLON  shift, and go to state 156


State 140

   22 statement: LVal SUB_ASSIGN expr . SEMICOLON

    SEMICOLON  shift, and go to state 157


State 141

   25 statement: IF LBRACKET lOrExp RBRACKET . statement
   26          | IF LBRACKET lOrExp RBRACKET . statement ELSE statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    IF          shift, and go to state 5
    WHILE       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    RETURN      shift, and go to state 9
    FOR         shift, and go to state 10
    CONST       shift, and go to state 11
    SCANF       shift, and go to state 12
    PRINTF      shift, and go to state 13
    SEMICOLON   shift, and go to state 14
    LBRACKET    shift, and go to state 15
    LBRACE      shift, and go to state 16
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    statement         go to state 158
    IOFunc            go to state 30
    block             go to state 31
    declaration       go to state 32
    constDeclaration  go to state 33
    T                 go to state 60
    expr              go to state 35
    lOrExp            go to state 36
    lAndExp           go to state 37
    eqExp             go to state 38
    relExp            go to state 39
    addExp            go to state 40
    mulExp            go to state 41
    unaryExp          go to state 42
    primaryExp        go to state 43
    LVal              go to state 44


State 142

   27 statement: WHILE LBRACKET lOrExp RBRACKET . statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    IF          shift, and go to state 5
    WHILE       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    RETURN      shift, and go to state 9
    FOR         shift, and go to state 10
    CONST       shift, and go to state 11
    SCANF       shift, and go to state 12
    PRINTF      shift, and go to state 13
    SEMICOLON   shift, and go to state 14
    LBRACKET    shift, and go to state 15
    LBRACE      shift, and go to state 16
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    statement         go to state 159
    IOFunc            go to state 30
    block             go to state 31
    declaration       go to state 32
    constDeclaration  go to state 33
    T                 go to state 60
    expr              go to state 35
    lOrExp            go to state 36
    lAndExp           go to state 37
    eqExp             go to state 38
    relExp            go to state 39
    addExp            go to state 40
    mulExp            go to state 41
    unaryExp          go to state 42
    primaryExp        go to state 43
    LVal              go to state 44


State 143

   31 statement: FOR LBRACKET forExpr12 SEMICOLON . forExpr12 SEMICOLON forExpr3 RBRACKET statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    $default  reduce using rule 35 (forExpr12)

    forExpr12   go to state 160
    T           go to state 106
    expr        go to state 107
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 144

   34 forExpr12: T IDENTIFIER . LOP_ASSIGN expr

    LOP_ASSIGN  shift, and go to state 161


State 145

   50 constDef: LVal LOP_ASSIGN . initVal

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    initVal     go to state 162
    expr        go to state 154
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 146

   38 IOFunc: SCANF LBRACKET STRING COMMA . scanfParams RBRACKET

    ADDR  shift, and go to state 163

    scanfParams  go to state 164


State 147

   39 IOFunc: PRINTF LBRACKET STRING COMMA . funcRParams RBRACKET

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    $default  reduce using rule 85 (funcRParams)

    expr         go to state 116
    lOrExp       go to state 36
    lAndExp      go to state 37
    eqExp        go to state 38
    relExp       go to state 39
    addExp       go to state 40
    mulExp       go to state 41
    unaryExp     go to state 42
    funcRParams  go to state 165
    primaryExp   go to state 43
    LVal         go to state 51


State 148

   84 unaryExp: IDENTIFIER LBRACKET funcRParams RBRACKET .

    $default  reduce using rule 84 (unaryExp)


State 149

   87 funcRParams: funcRParams COMMA . expr

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    expr        go to state 166
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 150

    6 funcDef: T IDENTIFIER LBRACKET funcParams . RBRACKET block
    7        | T IDENTIFIER LBRACKET funcParams . RBRACKET SEMICOLON
    9 funcParams: funcParams . COMMA funcParam

    RBRACKET  shift, and go to state 167
    COMMA     shift, and go to state 168


State 151

    8 funcParams: funcParam .
   14 funcParam: funcParam . LSB expr RSB

    LSB  shift, and go to state 169

    $default  reduce using rule 8 (funcParams)


State 152

   11 funcParam: T . IDENTIFIER
   12          | T . IDENTIFIER LSB RSB
   13          | T . IDENTIFIER LSB expr RSB

    IDENTIFIER  shift, and go to state 170


State 153

   47 varDef: LVal LOP_ASSIGN initVal .

    $default  reduce using rule 47 (varDef)


State 154

   51 initVal: expr .

    $default  reduce using rule 51 (initVal)


State 155

   20 statement: LVal LOP_ASSIGN expr SEMICOLON .

    $default  reduce using rule 20 (statement)


State 156

   21 statement: LVal ADD_ASSIGN expr SEMICOLON .

    $default  reduce using rule 21 (statement)


State 157

   22 statement: LVal SUB_ASSIGN expr SEMICOLON .

    $default  reduce using rule 22 (statement)


State 158

   25 statement: IF LBRACKET lOrExp RBRACKET statement .
   26          | IF LBRACKET lOrExp RBRACKET statement . ELSE statement

    ELSE  shift, and go to state 171

    ELSE      [reduce using rule 25 (statement)]
    $default  reduce using rule 25 (statement)


State 159

   27 statement: WHILE LBRACKET lOrExp RBRACKET statement .

    $default  reduce using rule 27 (statement)


State 160

   31 statement: FOR LBRACKET forExpr12 SEMICOLON forExpr12 . SEMICOLON forExpr3 RBRACKET statement

    SEMICOLON  shift, and go to state 172


State 161

   34 forExpr12: T IDENTIFIER LOP_ASSIGN . expr

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    expr        go to state 173
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 162

   50 constDef: LVal LOP_ASSIGN initVal .

    $default  reduce using rule 50 (constDef)


State 163

   40 scanfParams: ADDR . IDENTIFIER

    IDENTIFIER  shift, and go to state 174


State 164

   38 IOFunc: SCANF LBRACKET STRING COMMA scanfParams . RBRACKET
   41 scanfParams: scanfParams . COMMA ADDR IDENTIFIER

    RBRACKET  shift, and go to state 175
    COMMA     shift, and go to state 176


State 165

   39 IOFunc: PRINTF LBRACKET STRING COMMA funcRParams . RBRACKET
   87 funcRParams: funcRParams . COMMA expr

    RBRACKET  shift, and go to state 177
    COMMA     shift, and go to state 149


State 166

   87 funcRParams: funcRParams COMMA expr .

    $default  reduce using rule 87 (funcRParams)


State 167

    6 funcDef: T IDENTIFIER LBRACKET funcParams RBRACKET . block
    7        | T IDENTIFIER LBRACKET funcParams RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 178
    LBRACE     shift, and go to state 16

    block  go to state 179


State 168

    9 funcParams: funcParams COMMA . funcParam

    T_CHAR  shift, and go to state 1
    T_INT   shift, and go to state 2
    T_BOOL  shift, and go to state 3
    T_VOID  shift, and go to state 4

    funcParam  go to state 180
    T          go to state 152


State 169

   14 funcParam: funcParam LSB . expr RSB

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    expr        go to state 181
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 170

   11 funcParam: T IDENTIFIER .
   12          | T IDENTIFIER . LSB RSB
   13          | T IDENTIFIER . LSB expr RSB

    LSB  shift, and go to state 182

    LSB       [reduce using rule 11 (funcParam)]
    $default  reduce using rule 11 (funcParam)


State 171

   26 statement: IF LBRACKET lOrExp RBRACKET statement ELSE . statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    IF          shift, and go to state 5
    WHILE       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    RETURN      shift, and go to state 9
    FOR         shift, and go to state 10
    CONST       shift, and go to state 11
    SCANF       shift, and go to state 12
    PRINTF      shift, and go to state 13
    SEMICOLON   shift, and go to state 14
    LBRACKET    shift, and go to state 15
    LBRACE      shift, and go to state 16
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    statement         go to state 183
    IOFunc            go to state 30
    block             go to state 31
    declaration       go to state 32
    constDeclaration  go to state 33
    T                 go to state 60
    expr              go to state 35
    lOrExp            go to state 36
    lAndExp           go to state 37
    eqExp             go to state 38
    relExp            go to state 39
    addExp            go to state 40
    mulExp            go to state 41
    unaryExp          go to state 42
    primaryExp        go to state 43
    LVal              go to state 44


State 172

   31 statement: FOR LBRACKET forExpr12 SEMICOLON forExpr12 SEMICOLON . forExpr3 RBRACKET statement

    LBRACKET    shift, and go to state 15
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    $default  reduce using rule 37 (forExpr3)

    forExpr3    go to state 184
    expr        go to state 50
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 173

   34 forExpr12: T IDENTIFIER LOP_ASSIGN expr .

    $default  reduce using rule 34 (forExpr12)


State 174

   40 scanfParams: ADDR IDENTIFIER .

    $default  reduce using rule 40 (scanfParams)


State 175

   38 IOFunc: SCANF LBRACKET STRING COMMA scanfParams RBRACKET .

    $default  reduce using rule 38 (IOFunc)


State 176

   41 scanfParams: scanfParams COMMA . ADDR IDENTIFIER

    ADDR  shift, and go to state 185


State 177

   39 IOFunc: PRINTF LBRACKET STRING COMMA funcRParams RBRACKET .

    $default  reduce using rule 39 (IOFunc)


State 178

    7 funcDef: T IDENTIFIER LBRACKET funcParams RBRACKET SEMICOLON .

    $default  reduce using rule 7 (funcDef)


State 179

    6 funcDef: T IDENTIFIER LBRACKET funcParams RBRACKET block .

    $default  reduce using rule 6 (funcDef)


State 180

    9 funcParams: funcParams COMMA funcParam .
   14 funcParam: funcParam . LSB expr RSB

    LSB  shift, and go to state 169

    $default  reduce using rule 9 (funcParams)


State 181

   14 funcParam: funcParam LSB expr . RSB

    RSB  shift, and go to state 186


State 182

   12 funcParam: T IDENTIFIER LSB . RSB
   13          | T IDENTIFIER LSB . expr RSB

    LBRACKET    shift, and go to state 15
    RSB         shift, and go to state 187
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    expr        go to state 188
    lOrExp      go to state 36
    lAndExp     go to state 37
    eqExp       go to state 38
    relExp      go to state 39
    addExp      go to state 40
    mulExp      go to state 41
    unaryExp    go to state 42
    primaryExp  go to state 43
    LVal        go to state 51


State 183

   26 statement: IF LBRACKET lOrExp RBRACKET statement ELSE statement .

    $default  reduce using rule 26 (statement)


State 184

   31 statement: FOR LBRACKET forExpr12 SEMICOLON forExpr12 SEMICOLON forExpr3 . RBRACKET statement

    RBRACKET  shift, and go to state 189


State 185

   41 scanfParams: scanfParams COMMA ADDR . IDENTIFIER

    IDENTIFIER  shift, and go to state 190


State 186

   14 funcParam: funcParam LSB expr RSB .

    $default  reduce using rule 14 (funcParam)


State 187

   12 funcParam: T IDENTIFIER LSB RSB .

    $default  reduce using rule 12 (funcParam)


State 188

   13 funcParam: T IDENTIFIER LSB expr . RSB

    RSB  shift, and go to state 191


State 189

   31 statement: FOR LBRACKET forExpr12 SEMICOLON forExpr12 SEMICOLON forExpr3 RBRACKET . statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    IF          shift, and go to state 5
    WHILE       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    RETURN      shift, and go to state 9
    FOR         shift, and go to state 10
    CONST       shift, and go to state 11
    SCANF       shift, and go to state 12
    PRINTF      shift, and go to state 13
    SEMICOLON   shift, and go to state 14
    LBRACKET    shift, and go to state 15
    LBRACE      shift, and go to state 16
    IDENTIFIER  shift, and go to state 17
    INTEGER     shift, and go to state 18
    CHAR        shift, and go to state 19
    STRING      shift, and go to state 20
    ADD         shift, and go to state 21
    SUB         shift, and go to state 22
    INC         shift, and go to state 23
    DEC         shift, and go to state 24
    NOT         shift, and go to state 25

    statement         go to state 192
    IOFunc            go to state 30
    block             go to state 31
    declaration       go to state 32
    constDeclaration  go to state 33
    T                 go to state 60
    expr              go to state 35
    lOrExp            go to state 36
    lAndExp           go to state 37
    eqExp             go to state 38
    relExp            go to state 39
    addExp            go to state 40
    mulExp            go to state 41
    unaryExp          go to state 42
    primaryExp        go to state 43
    LVal              go to state 44


State 190

   41 scanfParams: scanfParams COMMA ADDR IDENTIFIER .

    $default  reduce using rule 41 (scanfParams)


State 191

   13 funcParam: T IDENTIFIER LSB expr RSB .

    $default  reduce using rule 13 (funcParam)


State 192

   31 statement: FOR LBRACKET forExpr12 SEMICOLON forExpr12 SEMICOLON forExpr3 RBRACKET statement .

    $default  reduce using rule 31 (statement)
