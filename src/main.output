Terminals unused in grammar

   T_STRING
   BOOL


State 36 conflicts: 3 shift/reduce
State 51 conflicts: 4 reduce/reduce
State 60 conflicts: 1 shift/reduce
State 177 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: compUnit

    2 compUnit: funcDef
    3         | decl SEMICOLON
    4         | compUnit funcDef
    5         | compUnit decl SEMICOLON

    6 funcDef: T IDENTIFIER LBRACKET funcParams RBRACKET block
    7        | T IDENTIFIER LBRACKET funcParams RBRACKET SEMICOLON

    8 funcParams: funcParam
    9           | funcParams COMMA funcParam
   10           | %empty

   11 funcParam: T IDENTIFIER
   12          | T IDENTIFIER LSB RSB
   13          | T IDENTIFIER LSB expr RSB
   14          | funcParam LSB expr RSB

   15 statements: statement
   16           | statements statement

   17 statement: SEMICOLON
   18          | declaration SEMICOLON
   19          | constDeclaration SEMICOLON
   20          | LVal LOP_ASSIGN expr SEMICOLON
   21          | LVal ADD_ASSIGN expr SEMICOLON
   22          | LVal SUB_ASSIGN expr SEMICOLON
   23          | expr SEMICOLON
   24          | block
   25          | IF LBRACKET lOrExp RBRACKET statement
   26          | IF LBRACKET lOrExp RBRACKET statement ELSE statement
   27          | WHILE LBRACKET lOrExp RBRACKET statement
   28          | BREAK SEMICOLON
   29          | CONTINUE SEMICOLON
   30          | RETURN forExpr3 SEMICOLON
   31          | FOR LBRACKET forExpr12 SEMICOLON forExpr12 SEMICOLON forExpr3 RBRACKET statement
   32          | IOFunc SEMICOLON

   33 forExpr12: expr
   34          | T IDENTIFIER LOP_ASSIGN expr
   35          | %empty

   36 forExpr3: expr
   37         | %empty

   38 IOFunc: SCANF LBRACKET STRING COMMA scanfParams RBRACKET
   39       | PRINTF LBRACKET STRING COMMA funcRParams RBRACKET

   40 scanfParams: ADDR IDENTIFIER
   41            | scanfParams COMMA ADDR IDENTIFIER

   42 block: LBRACE RBRACE
   43      | LBRACE statements RBRACE

   44 decl: declaration
   45     | constDeclaration

   46 declaration: T varDef
   47            | declaration COMMA varDef

   48 varDef: LVal
   49       | LVal LOP_ASSIGN initVal

   50 constDeclaration: CONST T constDef
   51                 | constDeclaration COMMA constDef

   52 constDef: LVal LOP_ASSIGN initVal

   53 initVal: expr

   54 T: T_INT
   55  | T_CHAR
   56  | T_BOOL
   57  | T_VOID

   58 expr: addExp
   59     | lOrExp
   60     | IDENTIFIER LOP_ASSIGN expr
   61     | IDENTIFIER ADD_ASSIGN expr
   62     | IDENTIFIER SUB_ASSIGN expr

   63 lOrExp: lAndExp
   64       | lOrExp OR lAndExp

   65 lAndExp: eqExp
   66        | lAndExp AND eqExp

   67 eqExp: relExp
   68      | eqExp LOP_EQ relExp
   69      | eqExp LOP_NQ relExp

   70 relExp: addExp
   71       | relExp LT addExp
   72       | relExp BT addExp
   73       | relExp LTEQ addExp
   74       | relExp BTEQ addExp

   75 addExp: mulExp
   76       | addExp ADD mulExp
   77       | addExp SUB mulExp

   78 mulExp: unaryExp
   79       | mulExp MUL unaryExp
   80       | mulExp DIV unaryExp
   81       | mulExp MOD unaryExp

   82 unaryExp: primaryExp
   83         | ADD unaryExp
   84         | SUB unaryExp
   85         | NOT unaryExp
   86         | IDENTIFIER LBRACKET funcRParams RBRACKET

   87 funcRParams: %empty
   88            | expr
   89            | funcRParams COMMA expr

   90 primaryExp: LBRACKET expr RBRACKET
   91           | LVal
   92           | INC IDENTIFIER
   93           | DEC IDENTIFIER
   94           | IDENTIFIER INC
   95           | IDENTIFIER DEC
   96           | INTEGER
   97           | CHAR
   98           | STRING

   99 LVal: IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
error (256)
T_CHAR (258) 55
T_INT (259) 54
T_STRING (260)
T_BOOL (261) 56
T_VOID (262) 57
IF (263) 25 26
ELSE (264) 26
WHILE (265) 27
BREAK (266) 28
CONTINUE (267) 29
RETURN (268) 30
FOR (269) 31
CONST (270) 50
SCANF (271) 38
PRINTF (272) 39
SEMICOLON (273) 3 5 7 17 18 19 20 21 22 23 28 29 30 31 32
LBRACKET (274) 6 7 25 26 27 31 38 39 86 90
RBRACKET (275) 6 7 25 26 27 31 38 39 86 90
LBRACE (276) 42 43
RBRACE (277) 42 43
COMMA (278) 9 38 39 41 47 51 89
LSB (279) 12 13 14
RSB (280) 12 13 14
IDENTIFIER (281) 6 7 11 12 13 34 40 41 60 61 62 86 92 93 94 95 99
INTEGER (282) 96
CHAR (283) 97
BOOL (284)
STRING (285) 38 39 98
ADD (286) 76 83
SUB (287) 77 84
MUL (288) 79
DIV (289) 80
MOD (290) 81
LOP_EQ (291) 68
LOP_NQ (292) 69
OR (293) 64
AND (294) 66
LT (295) 71
BT (296) 72
LTEQ (297) 73
BTEQ (298) 74
ADDR (299) 40 41
INC (300) 92 94
DEC (301) 93 95
NOT (302) 85
LOP_ASSIGN (303) 20 34 49 52 60
ADD_ASSIGN (304) 21 61
SUB_ASSIGN (305) 22 62


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1, on right: 0
compUnit (53)
    on left: 2 3 4 5, on right: 1 4 5
funcDef (54)
    on left: 6 7, on right: 2 4
funcParams (55)
    on left: 8 9 10, on right: 6 7 9
funcParam (56)
    on left: 11 12 13 14, on right: 8 9 14
statements (57)
    on left: 15 16, on right: 16 43
statement (58)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32, on right:
    15 16 25 26 27 31
forExpr12 (59)
    on left: 33 34 35, on right: 31
forExpr3 (60)
    on left: 36 37, on right: 30 31
IOFunc (61)
    on left: 38 39, on right: 32
scanfParams (62)
    on left: 40 41, on right: 38 41
block (63)
    on left: 42 43, on right: 6 24
decl (64)
    on left: 44 45, on right: 3 5
declaration (65)
    on left: 46 47, on right: 18 44 47
varDef (66)
    on left: 48 49, on right: 46 47
constDeclaration (67)
    on left: 50 51, on right: 19 45 51
constDef (68)
    on left: 52, on right: 50 51
initVal (69)
    on left: 53, on right: 49 52
T (70)
    on left: 54 55 56 57, on right: 6 7 11 12 13 34 46 50
expr (71)
    on left: 58 59 60 61 62, on right: 13 14 20 21 22 23 33 34 36 53
    60 61 62 88 89 90
lOrExp (72)
    on left: 63 64, on right: 25 26 27 59 64
lAndExp (73)
    on left: 65 66, on right: 63 64 66
eqExp (74)
    on left: 67 68 69, on right: 65 66 68 69
relExp (75)
    on left: 70 71 72 73 74, on right: 67 68 69 71 72 73 74
addExp (76)
    on left: 75 76 77, on right: 58 70 71 72 73 74 76 77
mulExp (77)
    on left: 78 79 80 81, on right: 75 76 77 79 80 81
unaryExp (78)
    on left: 82 83 84 85 86, on right: 78 79 80 81 83 84 85
funcRParams (79)
    on left: 87 88 89, on right: 39 86 89
primaryExp (80)
    on left: 90 91 92 93 94 95 96 97 98, on right: 82
LVal (81)
    on left: 99, on right: 20 21 22 48 49 52 91


State 0

    0 $accept: . program $end

    T_CHAR  shift, and go to state 1
    T_INT   shift, and go to state 2
    T_BOOL  shift, and go to state 3
    T_VOID  shift, and go to state 4
    CONST   shift, and go to state 5

    program           go to state 6
    compUnit          go to state 7
    funcDef           go to state 8
    decl              go to state 9
    declaration       go to state 10
    constDeclaration  go to state 11
    T                 go to state 12


State 1

   55 T: T_CHAR .

    $default  reduce using rule 55 (T)


State 2

   54 T: T_INT .

    $default  reduce using rule 54 (T)


State 3

   56 T: T_BOOL .

    $default  reduce using rule 56 (T)


State 4

   57 T: T_VOID .

    $default  reduce using rule 57 (T)


State 5

   50 constDeclaration: CONST . T constDef

    T_CHAR  shift, and go to state 1
    T_INT   shift, and go to state 2
    T_BOOL  shift, and go to state 3
    T_VOID  shift, and go to state 4

    T  go to state 13


State 6

    0 $accept: program . $end

    $end  shift, and go to state 14


State 7

    1 program: compUnit .
    4 compUnit: compUnit . funcDef
    5         | compUnit . decl SEMICOLON

    T_CHAR  shift, and go to state 1
    T_INT   shift, and go to state 2
    T_BOOL  shift, and go to state 3
    T_VOID  shift, and go to state 4
    CONST   shift, and go to state 5

    $default  reduce using rule 1 (program)

    funcDef           go to state 15
    decl              go to state 16
    declaration       go to state 10
    constDeclaration  go to state 11
    T                 go to state 12


State 8

    2 compUnit: funcDef .

    $default  reduce using rule 2 (compUnit)


State 9

    3 compUnit: decl . SEMICOLON

    SEMICOLON  shift, and go to state 17


State 10

   44 decl: declaration .
   47 declaration: declaration . COMMA varDef

    COMMA  shift, and go to state 18

    $default  reduce using rule 44 (decl)


State 11

   45 decl: constDeclaration .
   51 constDeclaration: constDeclaration . COMMA constDef

    COMMA  shift, and go to state 19

    $default  reduce using rule 45 (decl)


State 12

    6 funcDef: T . IDENTIFIER LBRACKET funcParams RBRACKET block
    7        | T . IDENTIFIER LBRACKET funcParams RBRACKET SEMICOLON
   46 declaration: T . varDef

    IDENTIFIER  shift, and go to state 20

    varDef  go to state 21
    LVal    go to state 22


State 13

   50 constDeclaration: CONST T . constDef

    IDENTIFIER  shift, and go to state 23

    constDef  go to state 24
    LVal      go to state 25


State 14

    0 $accept: program $end .

    $default  accept


State 15

    4 compUnit: compUnit funcDef .

    $default  reduce using rule 4 (compUnit)


State 16

    5 compUnit: compUnit decl . SEMICOLON

    SEMICOLON  shift, and go to state 26


State 17

    3 compUnit: decl SEMICOLON .

    $default  reduce using rule 3 (compUnit)


State 18

   47 declaration: declaration COMMA . varDef

    IDENTIFIER  shift, and go to state 23

    varDef  go to state 27
    LVal    go to state 22


State 19

   51 constDeclaration: constDeclaration COMMA . constDef

    IDENTIFIER  shift, and go to state 23

    constDef  go to state 28
    LVal      go to state 25


State 20

    6 funcDef: T IDENTIFIER . LBRACKET funcParams RBRACKET block
    7        | T IDENTIFIER . LBRACKET funcParams RBRACKET SEMICOLON
   99 LVal: IDENTIFIER .

    LBRACKET  shift, and go to state 29

    $default  reduce using rule 99 (LVal)


State 21

   46 declaration: T varDef .

    $default  reduce using rule 46 (declaration)


State 22

   48 varDef: LVal .
   49       | LVal . LOP_ASSIGN initVal

    LOP_ASSIGN  shift, and go to state 30

    $default  reduce using rule 48 (varDef)


State 23

   99 LVal: IDENTIFIER .

    $default  reduce using rule 99 (LVal)


State 24

   50 constDeclaration: CONST T constDef .

    $default  reduce using rule 50 (constDeclaration)


State 25

   52 constDef: LVal . LOP_ASSIGN initVal

    LOP_ASSIGN  shift, and go to state 31


State 26

    5 compUnit: compUnit decl SEMICOLON .

    $default  reduce using rule 5 (compUnit)


State 27

   47 declaration: declaration COMMA varDef .

    $default  reduce using rule 47 (declaration)


State 28

   51 constDeclaration: constDeclaration COMMA constDef .

    $default  reduce using rule 51 (constDeclaration)


State 29

    6 funcDef: T IDENTIFIER LBRACKET . funcParams RBRACKET block
    7        | T IDENTIFIER LBRACKET . funcParams RBRACKET SEMICOLON

    T_CHAR  shift, and go to state 1
    T_INT   shift, and go to state 2
    T_BOOL  shift, and go to state 3
    T_VOID  shift, and go to state 4

    $default  reduce using rule 10 (funcParams)

    funcParams  go to state 32
    funcParam   go to state 33
    T           go to state 34


State 30

   49 varDef: LVal LOP_ASSIGN . initVal

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    initVal     go to state 45
    expr        go to state 46
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 31

   52 constDef: LVal LOP_ASSIGN . initVal

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    initVal     go to state 56
    expr        go to state 46
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 32

    6 funcDef: T IDENTIFIER LBRACKET funcParams . RBRACKET block
    7        | T IDENTIFIER LBRACKET funcParams . RBRACKET SEMICOLON
    9 funcParams: funcParams . COMMA funcParam

    RBRACKET  shift, and go to state 57
    COMMA     shift, and go to state 58


State 33

    8 funcParams: funcParam .
   14 funcParam: funcParam . LSB expr RSB

    LSB  shift, and go to state 59

    $default  reduce using rule 8 (funcParams)


State 34

   11 funcParam: T . IDENTIFIER
   12          | T . IDENTIFIER LSB RSB
   13          | T . IDENTIFIER LSB expr RSB

    IDENTIFIER  shift, and go to state 60


State 35

   90 primaryExp: LBRACKET . expr RBRACKET

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    expr        go to state 61
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 36

   60 expr: IDENTIFIER . LOP_ASSIGN expr
   61     | IDENTIFIER . ADD_ASSIGN expr
   62     | IDENTIFIER . SUB_ASSIGN expr
   86 unaryExp: IDENTIFIER . LBRACKET funcRParams RBRACKET
   94 primaryExp: IDENTIFIER . INC
   95           | IDENTIFIER . DEC
   99 LVal: IDENTIFIER .

    LBRACKET    shift, and go to state 62
    INC         shift, and go to state 63
    DEC         shift, and go to state 64
    LOP_ASSIGN  shift, and go to state 65
    ADD_ASSIGN  shift, and go to state 66
    SUB_ASSIGN  shift, and go to state 67

    LOP_ASSIGN  [reduce using rule 99 (LVal)]
    ADD_ASSIGN  [reduce using rule 99 (LVal)]
    SUB_ASSIGN  [reduce using rule 99 (LVal)]
    $default    reduce using rule 99 (LVal)


State 37

   96 primaryExp: INTEGER .

    $default  reduce using rule 96 (primaryExp)


State 38

   97 primaryExp: CHAR .

    $default  reduce using rule 97 (primaryExp)


State 39

   98 primaryExp: STRING .

    $default  reduce using rule 98 (primaryExp)


State 40

   83 unaryExp: ADD . unaryExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    unaryExp    go to state 69
    primaryExp  go to state 54
    LVal        go to state 55


State 41

   84 unaryExp: SUB . unaryExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    unaryExp    go to state 70
    primaryExp  go to state 54
    LVal        go to state 55


State 42

   92 primaryExp: INC . IDENTIFIER

    IDENTIFIER  shift, and go to state 71


State 43

   93 primaryExp: DEC . IDENTIFIER

    IDENTIFIER  shift, and go to state 72


State 44

   85 unaryExp: NOT . unaryExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    unaryExp    go to state 73
    primaryExp  go to state 54
    LVal        go to state 55


State 45

   49 varDef: LVal LOP_ASSIGN initVal .

    $default  reduce using rule 49 (varDef)


State 46

   53 initVal: expr .

    $default  reduce using rule 53 (initVal)


State 47

   59 expr: lOrExp .
   64 lOrExp: lOrExp . OR lAndExp

    OR  shift, and go to state 74

    $default  reduce using rule 59 (expr)


State 48

   63 lOrExp: lAndExp .
   66 lAndExp: lAndExp . AND eqExp

    AND  shift, and go to state 75

    $default  reduce using rule 63 (lOrExp)


State 49

   65 lAndExp: eqExp .
   68 eqExp: eqExp . LOP_EQ relExp
   69      | eqExp . LOP_NQ relExp

    LOP_EQ  shift, and go to state 76
    LOP_NQ  shift, and go to state 77

    $default  reduce using rule 65 (lAndExp)


State 50

   67 eqExp: relExp .
   71 relExp: relExp . LT addExp
   72       | relExp . BT addExp
   73       | relExp . LTEQ addExp
   74       | relExp . BTEQ addExp

    LT    shift, and go to state 78
    BT    shift, and go to state 79
    LTEQ  shift, and go to state 80
    BTEQ  shift, and go to state 81

    $default  reduce using rule 67 (eqExp)


State 51

   58 expr: addExp .
   70 relExp: addExp .
   76 addExp: addExp . ADD mulExp
   77       | addExp . SUB mulExp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83

    SEMICOLON  reduce using rule 58 (expr)
    SEMICOLON  [reduce using rule 70 (relExp)]
    RBRACKET   reduce using rule 58 (expr)
    RBRACKET   [reduce using rule 70 (relExp)]
    COMMA      reduce using rule 58 (expr)
    COMMA      [reduce using rule 70 (relExp)]
    RSB        reduce using rule 58 (expr)
    RSB        [reduce using rule 70 (relExp)]
    $default   reduce using rule 70 (relExp)


State 52

   75 addExp: mulExp .
   79 mulExp: mulExp . MUL unaryExp
   80       | mulExp . DIV unaryExp
   81       | mulExp . MOD unaryExp

    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86

    $default  reduce using rule 75 (addExp)


State 53

   78 mulExp: unaryExp .

    $default  reduce using rule 78 (mulExp)


State 54

   82 unaryExp: primaryExp .

    $default  reduce using rule 82 (unaryExp)


State 55

   91 primaryExp: LVal .

    $default  reduce using rule 91 (primaryExp)


State 56

   52 constDef: LVal LOP_ASSIGN initVal .

    $default  reduce using rule 52 (constDef)


State 57

    6 funcDef: T IDENTIFIER LBRACKET funcParams RBRACKET . block
    7        | T IDENTIFIER LBRACKET funcParams RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 87
    LBRACE     shift, and go to state 88

    block  go to state 89


State 58

    9 funcParams: funcParams COMMA . funcParam

    T_CHAR  shift, and go to state 1
    T_INT   shift, and go to state 2
    T_BOOL  shift, and go to state 3
    T_VOID  shift, and go to state 4

    funcParam  go to state 90
    T          go to state 34


State 59

   14 funcParam: funcParam LSB . expr RSB

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    expr        go to state 91
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 60

   11 funcParam: T IDENTIFIER .
   12          | T IDENTIFIER . LSB RSB
   13          | T IDENTIFIER . LSB expr RSB

    LSB  shift, and go to state 92

    LSB       [reduce using rule 11 (funcParam)]
    $default  reduce using rule 11 (funcParam)


State 61

   90 primaryExp: LBRACKET expr . RBRACKET

    RBRACKET  shift, and go to state 93


State 62

   86 unaryExp: IDENTIFIER LBRACKET . funcRParams RBRACKET

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    $default  reduce using rule 87 (funcRParams)

    expr         go to state 94
    lOrExp       go to state 47
    lAndExp      go to state 48
    eqExp        go to state 49
    relExp       go to state 50
    addExp       go to state 51
    mulExp       go to state 52
    unaryExp     go to state 53
    funcRParams  go to state 95
    primaryExp   go to state 54
    LVal         go to state 55


State 63

   94 primaryExp: IDENTIFIER INC .

    $default  reduce using rule 94 (primaryExp)


State 64

   95 primaryExp: IDENTIFIER DEC .

    $default  reduce using rule 95 (primaryExp)


State 65

   60 expr: IDENTIFIER LOP_ASSIGN . expr

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    expr        go to state 96
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 66

   61 expr: IDENTIFIER ADD_ASSIGN . expr

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    expr        go to state 97
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 67

   62 expr: IDENTIFIER SUB_ASSIGN . expr

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    expr        go to state 98
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 68

   86 unaryExp: IDENTIFIER . LBRACKET funcRParams RBRACKET
   94 primaryExp: IDENTIFIER . INC
   95           | IDENTIFIER . DEC
   99 LVal: IDENTIFIER .

    LBRACKET  shift, and go to state 62
    INC       shift, and go to state 63
    DEC       shift, and go to state 64

    $default  reduce using rule 99 (LVal)


State 69

   83 unaryExp: ADD unaryExp .

    $default  reduce using rule 83 (unaryExp)


State 70

   84 unaryExp: SUB unaryExp .

    $default  reduce using rule 84 (unaryExp)


State 71

   92 primaryExp: INC IDENTIFIER .

    $default  reduce using rule 92 (primaryExp)


State 72

   93 primaryExp: DEC IDENTIFIER .

    $default  reduce using rule 93 (primaryExp)


State 73

   85 unaryExp: NOT unaryExp .

    $default  reduce using rule 85 (unaryExp)


State 74

   64 lOrExp: lOrExp OR . lAndExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    lAndExp     go to state 99
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 100
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 75

   66 lAndExp: lAndExp AND . eqExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    eqExp       go to state 101
    relExp      go to state 50
    addExp      go to state 100
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 76

   68 eqExp: eqExp LOP_EQ . relExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    relExp      go to state 102
    addExp      go to state 100
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 77

   69 eqExp: eqExp LOP_NQ . relExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    relExp      go to state 103
    addExp      go to state 100
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 78

   71 relExp: relExp LT . addExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    addExp      go to state 104
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 79

   72 relExp: relExp BT . addExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    addExp      go to state 105
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 80

   73 relExp: relExp LTEQ . addExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    addExp      go to state 106
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 81

   74 relExp: relExp BTEQ . addExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    addExp      go to state 107
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 82

   76 addExp: addExp ADD . mulExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    mulExp      go to state 108
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 83

   77 addExp: addExp SUB . mulExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    mulExp      go to state 109
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 84

   79 mulExp: mulExp MUL . unaryExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    unaryExp    go to state 110
    primaryExp  go to state 54
    LVal        go to state 55


State 85

   80 mulExp: mulExp DIV . unaryExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    unaryExp    go to state 111
    primaryExp  go to state 54
    LVal        go to state 55


State 86

   81 mulExp: mulExp MOD . unaryExp

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    unaryExp    go to state 112
    primaryExp  go to state 54
    LVal        go to state 55


State 87

    7 funcDef: T IDENTIFIER LBRACKET funcParams RBRACKET SEMICOLON .

    $default  reduce using rule 7 (funcDef)


State 88

   42 block: LBRACE . RBRACE
   43      | LBRACE . statements RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    IF          shift, and go to state 113
    WHILE       shift, and go to state 114
    BREAK       shift, and go to state 115
    CONTINUE    shift, and go to state 116
    RETURN      shift, and go to state 117
    FOR         shift, and go to state 118
    CONST       shift, and go to state 5
    SCANF       shift, and go to state 119
    PRINTF      shift, and go to state 120
    SEMICOLON   shift, and go to state 121
    LBRACKET    shift, and go to state 35
    LBRACE      shift, and go to state 88
    RBRACE      shift, and go to state 122
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    statements        go to state 123
    statement         go to state 124
    IOFunc            go to state 125
    block             go to state 126
    declaration       go to state 127
    constDeclaration  go to state 128
    T                 go to state 129
    expr              go to state 130
    lOrExp            go to state 47
    lAndExp           go to state 48
    eqExp             go to state 49
    relExp            go to state 50
    addExp            go to state 51
    mulExp            go to state 52
    unaryExp          go to state 53
    primaryExp        go to state 54
    LVal              go to state 131


State 89

    6 funcDef: T IDENTIFIER LBRACKET funcParams RBRACKET block .

    $default  reduce using rule 6 (funcDef)


State 90

    9 funcParams: funcParams COMMA funcParam .
   14 funcParam: funcParam . LSB expr RSB

    LSB  shift, and go to state 59

    $default  reduce using rule 9 (funcParams)


State 91

   14 funcParam: funcParam LSB expr . RSB

    RSB  shift, and go to state 132


State 92

   12 funcParam: T IDENTIFIER LSB . RSB
   13          | T IDENTIFIER LSB . expr RSB

    LBRACKET    shift, and go to state 35
    RSB         shift, and go to state 133
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    expr        go to state 134
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 93

   90 primaryExp: LBRACKET expr RBRACKET .

    $default  reduce using rule 90 (primaryExp)


State 94

   88 funcRParams: expr .

    $default  reduce using rule 88 (funcRParams)


State 95

   86 unaryExp: IDENTIFIER LBRACKET funcRParams . RBRACKET
   89 funcRParams: funcRParams . COMMA expr

    RBRACKET  shift, and go to state 135
    COMMA     shift, and go to state 136


State 96

   60 expr: IDENTIFIER LOP_ASSIGN expr .

    $default  reduce using rule 60 (expr)


State 97

   61 expr: IDENTIFIER ADD_ASSIGN expr .

    $default  reduce using rule 61 (expr)


State 98

   62 expr: IDENTIFIER SUB_ASSIGN expr .

    $default  reduce using rule 62 (expr)


State 99

   64 lOrExp: lOrExp OR lAndExp .
   66 lAndExp: lAndExp . AND eqExp

    AND  shift, and go to state 75

    $default  reduce using rule 64 (lOrExp)


State 100

   70 relExp: addExp .
   76 addExp: addExp . ADD mulExp
   77       | addExp . SUB mulExp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83

    $default  reduce using rule 70 (relExp)


State 101

   66 lAndExp: lAndExp AND eqExp .
   68 eqExp: eqExp . LOP_EQ relExp
   69      | eqExp . LOP_NQ relExp

    LOP_EQ  shift, and go to state 76
    LOP_NQ  shift, and go to state 77

    $default  reduce using rule 66 (lAndExp)


State 102

   68 eqExp: eqExp LOP_EQ relExp .
   71 relExp: relExp . LT addExp
   72       | relExp . BT addExp
   73       | relExp . LTEQ addExp
   74       | relExp . BTEQ addExp

    LT    shift, and go to state 78
    BT    shift, and go to state 79
    LTEQ  shift, and go to state 80
    BTEQ  shift, and go to state 81

    $default  reduce using rule 68 (eqExp)


State 103

   69 eqExp: eqExp LOP_NQ relExp .
   71 relExp: relExp . LT addExp
   72       | relExp . BT addExp
   73       | relExp . LTEQ addExp
   74       | relExp . BTEQ addExp

    LT    shift, and go to state 78
    BT    shift, and go to state 79
    LTEQ  shift, and go to state 80
    BTEQ  shift, and go to state 81

    $default  reduce using rule 69 (eqExp)


State 104

   71 relExp: relExp LT addExp .
   76 addExp: addExp . ADD mulExp
   77       | addExp . SUB mulExp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83

    $default  reduce using rule 71 (relExp)


State 105

   72 relExp: relExp BT addExp .
   76 addExp: addExp . ADD mulExp
   77       | addExp . SUB mulExp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83

    $default  reduce using rule 72 (relExp)


State 106

   73 relExp: relExp LTEQ addExp .
   76 addExp: addExp . ADD mulExp
   77       | addExp . SUB mulExp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83

    $default  reduce using rule 73 (relExp)


State 107

   74 relExp: relExp BTEQ addExp .
   76 addExp: addExp . ADD mulExp
   77       | addExp . SUB mulExp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83

    $default  reduce using rule 74 (relExp)


State 108

   76 addExp: addExp ADD mulExp .
   79 mulExp: mulExp . MUL unaryExp
   80       | mulExp . DIV unaryExp
   81       | mulExp . MOD unaryExp

    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86

    $default  reduce using rule 76 (addExp)


State 109

   77 addExp: addExp SUB mulExp .
   79 mulExp: mulExp . MUL unaryExp
   80       | mulExp . DIV unaryExp
   81       | mulExp . MOD unaryExp

    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86

    $default  reduce using rule 77 (addExp)


State 110

   79 mulExp: mulExp MUL unaryExp .

    $default  reduce using rule 79 (mulExp)


State 111

   80 mulExp: mulExp DIV unaryExp .

    $default  reduce using rule 80 (mulExp)


State 112

   81 mulExp: mulExp MOD unaryExp .

    $default  reduce using rule 81 (mulExp)


State 113

   25 statement: IF . LBRACKET lOrExp RBRACKET statement
   26          | IF . LBRACKET lOrExp RBRACKET statement ELSE statement

    LBRACKET  shift, and go to state 137


State 114

   27 statement: WHILE . LBRACKET lOrExp RBRACKET statement

    LBRACKET  shift, and go to state 138


State 115

   28 statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 139


State 116

   29 statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 140


State 117

   30 statement: RETURN . forExpr3 SEMICOLON

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    $default  reduce using rule 37 (forExpr3)

    forExpr3    go to state 141
    expr        go to state 142
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 118

   31 statement: FOR . LBRACKET forExpr12 SEMICOLON forExpr12 SEMICOLON forExpr3 RBRACKET statement

    LBRACKET  shift, and go to state 143


State 119

   38 IOFunc: SCANF . LBRACKET STRING COMMA scanfParams RBRACKET

    LBRACKET  shift, and go to state 144


State 120

   39 IOFunc: PRINTF . LBRACKET STRING COMMA funcRParams RBRACKET

    LBRACKET  shift, and go to state 145


State 121

   17 statement: SEMICOLON .

    $default  reduce using rule 17 (statement)


State 122

   42 block: LBRACE RBRACE .

    $default  reduce using rule 42 (block)


State 123

   16 statements: statements . statement
   43 block: LBRACE statements . RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    IF          shift, and go to state 113
    WHILE       shift, and go to state 114
    BREAK       shift, and go to state 115
    CONTINUE    shift, and go to state 116
    RETURN      shift, and go to state 117
    FOR         shift, and go to state 118
    CONST       shift, and go to state 5
    SCANF       shift, and go to state 119
    PRINTF      shift, and go to state 120
    SEMICOLON   shift, and go to state 121
    LBRACKET    shift, and go to state 35
    LBRACE      shift, and go to state 88
    RBRACE      shift, and go to state 146
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    statement         go to state 147
    IOFunc            go to state 125
    block             go to state 126
    declaration       go to state 127
    constDeclaration  go to state 128
    T                 go to state 129
    expr              go to state 130
    lOrExp            go to state 47
    lAndExp           go to state 48
    eqExp             go to state 49
    relExp            go to state 50
    addExp            go to state 51
    mulExp            go to state 52
    unaryExp          go to state 53
    primaryExp        go to state 54
    LVal              go to state 131


State 124

   15 statements: statement .

    $default  reduce using rule 15 (statements)


State 125

   32 statement: IOFunc . SEMICOLON

    SEMICOLON  shift, and go to state 148


State 126

   24 statement: block .

    $default  reduce using rule 24 (statement)


State 127

   18 statement: declaration . SEMICOLON
   47 declaration: declaration . COMMA varDef

    SEMICOLON  shift, and go to state 149
    COMMA      shift, and go to state 18


State 128

   19 statement: constDeclaration . SEMICOLON
   51 constDeclaration: constDeclaration . COMMA constDef

    SEMICOLON  shift, and go to state 150
    COMMA      shift, and go to state 19


State 129

   46 declaration: T . varDef

    IDENTIFIER  shift, and go to state 23

    varDef  go to state 21
    LVal    go to state 22


State 130

   23 statement: expr . SEMICOLON

    SEMICOLON  shift, and go to state 151


State 131

   20 statement: LVal . LOP_ASSIGN expr SEMICOLON
   21          | LVal . ADD_ASSIGN expr SEMICOLON
   22          | LVal . SUB_ASSIGN expr SEMICOLON
   91 primaryExp: LVal .

    LOP_ASSIGN  shift, and go to state 152
    ADD_ASSIGN  shift, and go to state 153
    SUB_ASSIGN  shift, and go to state 154

    $default  reduce using rule 91 (primaryExp)


State 132

   14 funcParam: funcParam LSB expr RSB .

    $default  reduce using rule 14 (funcParam)


State 133

   12 funcParam: T IDENTIFIER LSB RSB .

    $default  reduce using rule 12 (funcParam)


State 134

   13 funcParam: T IDENTIFIER LSB expr . RSB

    RSB  shift, and go to state 155


State 135

   86 unaryExp: IDENTIFIER LBRACKET funcRParams RBRACKET .

    $default  reduce using rule 86 (unaryExp)


State 136

   89 funcRParams: funcRParams COMMA . expr

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    expr        go to state 156
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 137

   25 statement: IF LBRACKET . lOrExp RBRACKET statement
   26          | IF LBRACKET . lOrExp RBRACKET statement ELSE statement

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    lOrExp      go to state 157
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 100
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 138

   27 statement: WHILE LBRACKET . lOrExp RBRACKET statement

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 68
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    lOrExp      go to state 158
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 100
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 139

   28 statement: BREAK SEMICOLON .

    $default  reduce using rule 28 (statement)


State 140

   29 statement: CONTINUE SEMICOLON .

    $default  reduce using rule 29 (statement)


State 141

   30 statement: RETURN forExpr3 . SEMICOLON

    SEMICOLON  shift, and go to state 159


State 142

   36 forExpr3: expr .

    $default  reduce using rule 36 (forExpr3)


State 143

   31 statement: FOR LBRACKET . forExpr12 SEMICOLON forExpr12 SEMICOLON forExpr3 RBRACKET statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    $default  reduce using rule 35 (forExpr12)

    forExpr12   go to state 160
    T           go to state 161
    expr        go to state 162
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 144

   38 IOFunc: SCANF LBRACKET . STRING COMMA scanfParams RBRACKET

    STRING  shift, and go to state 163


State 145

   39 IOFunc: PRINTF LBRACKET . STRING COMMA funcRParams RBRACKET

    STRING  shift, and go to state 164


State 146

   43 block: LBRACE statements RBRACE .

    $default  reduce using rule 43 (block)


State 147

   16 statements: statements statement .

    $default  reduce using rule 16 (statements)


State 148

   32 statement: IOFunc SEMICOLON .

    $default  reduce using rule 32 (statement)


State 149

   18 statement: declaration SEMICOLON .

    $default  reduce using rule 18 (statement)


State 150

   19 statement: constDeclaration SEMICOLON .

    $default  reduce using rule 19 (statement)


State 151

   23 statement: expr SEMICOLON .

    $default  reduce using rule 23 (statement)


State 152

   20 statement: LVal LOP_ASSIGN . expr SEMICOLON

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    expr        go to state 165
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 153

   21 statement: LVal ADD_ASSIGN . expr SEMICOLON

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    expr        go to state 166
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 154

   22 statement: LVal SUB_ASSIGN . expr SEMICOLON

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    expr        go to state 167
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 155

   13 funcParam: T IDENTIFIER LSB expr RSB .

    $default  reduce using rule 13 (funcParam)


State 156

   89 funcRParams: funcRParams COMMA expr .

    $default  reduce using rule 89 (funcRParams)


State 157

   25 statement: IF LBRACKET lOrExp . RBRACKET statement
   26          | IF LBRACKET lOrExp . RBRACKET statement ELSE statement
   64 lOrExp: lOrExp . OR lAndExp

    RBRACKET  shift, and go to state 168
    OR        shift, and go to state 74


State 158

   27 statement: WHILE LBRACKET lOrExp . RBRACKET statement
   64 lOrExp: lOrExp . OR lAndExp

    RBRACKET  shift, and go to state 169
    OR        shift, and go to state 74


State 159

   30 statement: RETURN forExpr3 SEMICOLON .

    $default  reduce using rule 30 (statement)


State 160

   31 statement: FOR LBRACKET forExpr12 . SEMICOLON forExpr12 SEMICOLON forExpr3 RBRACKET statement

    SEMICOLON  shift, and go to state 170


State 161

   34 forExpr12: T . IDENTIFIER LOP_ASSIGN expr

    IDENTIFIER  shift, and go to state 171


State 162

   33 forExpr12: expr .

    $default  reduce using rule 33 (forExpr12)


State 163

   38 IOFunc: SCANF LBRACKET STRING . COMMA scanfParams RBRACKET

    COMMA  shift, and go to state 172


State 164

   39 IOFunc: PRINTF LBRACKET STRING . COMMA funcRParams RBRACKET

    COMMA  shift, and go to state 173


State 165

   20 statement: LVal LOP_ASSIGN expr . SEMICOLON

    SEMICOLON  shift, and go to state 174


State 166

   21 statement: LVal ADD_ASSIGN expr . SEMICOLON

    SEMICOLON  shift, and go to state 175


State 167

   22 statement: LVal SUB_ASSIGN expr . SEMICOLON

    SEMICOLON  shift, and go to state 176


State 168

   25 statement: IF LBRACKET lOrExp RBRACKET . statement
   26          | IF LBRACKET lOrExp RBRACKET . statement ELSE statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    IF          shift, and go to state 113
    WHILE       shift, and go to state 114
    BREAK       shift, and go to state 115
    CONTINUE    shift, and go to state 116
    RETURN      shift, and go to state 117
    FOR         shift, and go to state 118
    CONST       shift, and go to state 5
    SCANF       shift, and go to state 119
    PRINTF      shift, and go to state 120
    SEMICOLON   shift, and go to state 121
    LBRACKET    shift, and go to state 35
    LBRACE      shift, and go to state 88
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    statement         go to state 177
    IOFunc            go to state 125
    block             go to state 126
    declaration       go to state 127
    constDeclaration  go to state 128
    T                 go to state 129
    expr              go to state 130
    lOrExp            go to state 47
    lAndExp           go to state 48
    eqExp             go to state 49
    relExp            go to state 50
    addExp            go to state 51
    mulExp            go to state 52
    unaryExp          go to state 53
    primaryExp        go to state 54
    LVal              go to state 131


State 169

   27 statement: WHILE LBRACKET lOrExp RBRACKET . statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    IF          shift, and go to state 113
    WHILE       shift, and go to state 114
    BREAK       shift, and go to state 115
    CONTINUE    shift, and go to state 116
    RETURN      shift, and go to state 117
    FOR         shift, and go to state 118
    CONST       shift, and go to state 5
    SCANF       shift, and go to state 119
    PRINTF      shift, and go to state 120
    SEMICOLON   shift, and go to state 121
    LBRACKET    shift, and go to state 35
    LBRACE      shift, and go to state 88
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    statement         go to state 178
    IOFunc            go to state 125
    block             go to state 126
    declaration       go to state 127
    constDeclaration  go to state 128
    T                 go to state 129
    expr              go to state 130
    lOrExp            go to state 47
    lAndExp           go to state 48
    eqExp             go to state 49
    relExp            go to state 50
    addExp            go to state 51
    mulExp            go to state 52
    unaryExp          go to state 53
    primaryExp        go to state 54
    LVal              go to state 131


State 170

   31 statement: FOR LBRACKET forExpr12 SEMICOLON . forExpr12 SEMICOLON forExpr3 RBRACKET statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    $default  reduce using rule 35 (forExpr12)

    forExpr12   go to state 179
    T           go to state 161
    expr        go to state 162
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 171

   34 forExpr12: T IDENTIFIER . LOP_ASSIGN expr

    LOP_ASSIGN  shift, and go to state 180


State 172

   38 IOFunc: SCANF LBRACKET STRING COMMA . scanfParams RBRACKET

    ADDR  shift, and go to state 181

    scanfParams  go to state 182


State 173

   39 IOFunc: PRINTF LBRACKET STRING COMMA . funcRParams RBRACKET

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    $default  reduce using rule 87 (funcRParams)

    expr         go to state 94
    lOrExp       go to state 47
    lAndExp      go to state 48
    eqExp        go to state 49
    relExp       go to state 50
    addExp       go to state 51
    mulExp       go to state 52
    unaryExp     go to state 53
    funcRParams  go to state 183
    primaryExp   go to state 54
    LVal         go to state 55


State 174

   20 statement: LVal LOP_ASSIGN expr SEMICOLON .

    $default  reduce using rule 20 (statement)


State 175

   21 statement: LVal ADD_ASSIGN expr SEMICOLON .

    $default  reduce using rule 21 (statement)


State 176

   22 statement: LVal SUB_ASSIGN expr SEMICOLON .

    $default  reduce using rule 22 (statement)


State 177

   25 statement: IF LBRACKET lOrExp RBRACKET statement .
   26          | IF LBRACKET lOrExp RBRACKET statement . ELSE statement

    ELSE  shift, and go to state 184

    ELSE      [reduce using rule 25 (statement)]
    $default  reduce using rule 25 (statement)


State 178

   27 statement: WHILE LBRACKET lOrExp RBRACKET statement .

    $default  reduce using rule 27 (statement)


State 179

   31 statement: FOR LBRACKET forExpr12 SEMICOLON forExpr12 . SEMICOLON forExpr3 RBRACKET statement

    SEMICOLON  shift, and go to state 185


State 180

   34 forExpr12: T IDENTIFIER LOP_ASSIGN . expr

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    expr        go to state 186
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 181

   40 scanfParams: ADDR . IDENTIFIER

    IDENTIFIER  shift, and go to state 187


State 182

   38 IOFunc: SCANF LBRACKET STRING COMMA scanfParams . RBRACKET
   41 scanfParams: scanfParams . COMMA ADDR IDENTIFIER

    RBRACKET  shift, and go to state 188
    COMMA     shift, and go to state 189


State 183

   39 IOFunc: PRINTF LBRACKET STRING COMMA funcRParams . RBRACKET
   89 funcRParams: funcRParams . COMMA expr

    RBRACKET  shift, and go to state 190
    COMMA     shift, and go to state 136


State 184

   26 statement: IF LBRACKET lOrExp RBRACKET statement ELSE . statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    IF          shift, and go to state 113
    WHILE       shift, and go to state 114
    BREAK       shift, and go to state 115
    CONTINUE    shift, and go to state 116
    RETURN      shift, and go to state 117
    FOR         shift, and go to state 118
    CONST       shift, and go to state 5
    SCANF       shift, and go to state 119
    PRINTF      shift, and go to state 120
    SEMICOLON   shift, and go to state 121
    LBRACKET    shift, and go to state 35
    LBRACE      shift, and go to state 88
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    statement         go to state 191
    IOFunc            go to state 125
    block             go to state 126
    declaration       go to state 127
    constDeclaration  go to state 128
    T                 go to state 129
    expr              go to state 130
    lOrExp            go to state 47
    lAndExp           go to state 48
    eqExp             go to state 49
    relExp            go to state 50
    addExp            go to state 51
    mulExp            go to state 52
    unaryExp          go to state 53
    primaryExp        go to state 54
    LVal              go to state 131


State 185

   31 statement: FOR LBRACKET forExpr12 SEMICOLON forExpr12 SEMICOLON . forExpr3 RBRACKET statement

    LBRACKET    shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    $default  reduce using rule 37 (forExpr3)

    forExpr3    go to state 192
    expr        go to state 142
    lOrExp      go to state 47
    lAndExp     go to state 48
    eqExp       go to state 49
    relExp      go to state 50
    addExp      go to state 51
    mulExp      go to state 52
    unaryExp    go to state 53
    primaryExp  go to state 54
    LVal        go to state 55


State 186

   34 forExpr12: T IDENTIFIER LOP_ASSIGN expr .

    $default  reduce using rule 34 (forExpr12)


State 187

   40 scanfParams: ADDR IDENTIFIER .

    $default  reduce using rule 40 (scanfParams)


State 188

   38 IOFunc: SCANF LBRACKET STRING COMMA scanfParams RBRACKET .

    $default  reduce using rule 38 (IOFunc)


State 189

   41 scanfParams: scanfParams COMMA . ADDR IDENTIFIER

    ADDR  shift, and go to state 193


State 190

   39 IOFunc: PRINTF LBRACKET STRING COMMA funcRParams RBRACKET .

    $default  reduce using rule 39 (IOFunc)


State 191

   26 statement: IF LBRACKET lOrExp RBRACKET statement ELSE statement .

    $default  reduce using rule 26 (statement)


State 192

   31 statement: FOR LBRACKET forExpr12 SEMICOLON forExpr12 SEMICOLON forExpr3 . RBRACKET statement

    RBRACKET  shift, and go to state 194


State 193

   41 scanfParams: scanfParams COMMA ADDR . IDENTIFIER

    IDENTIFIER  shift, and go to state 195


State 194

   31 statement: FOR LBRACKET forExpr12 SEMICOLON forExpr12 SEMICOLON forExpr3 RBRACKET . statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    T_VOID      shift, and go to state 4
    IF          shift, and go to state 113
    WHILE       shift, and go to state 114
    BREAK       shift, and go to state 115
    CONTINUE    shift, and go to state 116
    RETURN      shift, and go to state 117
    FOR         shift, and go to state 118
    CONST       shift, and go to state 5
    SCANF       shift, and go to state 119
    PRINTF      shift, and go to state 120
    SEMICOLON   shift, and go to state 121
    LBRACKET    shift, and go to state 35
    LBRACE      shift, and go to state 88
    IDENTIFIER  shift, and go to state 36
    INTEGER     shift, and go to state 37
    CHAR        shift, and go to state 38
    STRING      shift, and go to state 39
    ADD         shift, and go to state 40
    SUB         shift, and go to state 41
    INC         shift, and go to state 42
    DEC         shift, and go to state 43
    NOT         shift, and go to state 44

    statement         go to state 196
    IOFunc            go to state 125
    block             go to state 126
    declaration       go to state 127
    constDeclaration  go to state 128
    T                 go to state 129
    expr              go to state 130
    lOrExp            go to state 47
    lAndExp           go to state 48
    eqExp             go to state 49
    relExp            go to state 50
    addExp            go to state 51
    mulExp            go to state 52
    unaryExp          go to state 53
    primaryExp        go to state 54
    LVal              go to state 131


State 195

   41 scanfParams: scanfParams COMMA ADDR IDENTIFIER .

    $default  reduce using rule 41 (scanfParams)


State 196

   31 statement: FOR LBRACKET forExpr12 SEMICOLON forExpr12 SEMICOLON forExpr3 RBRACKET statement .

    $default  reduce using rule 31 (statement)
